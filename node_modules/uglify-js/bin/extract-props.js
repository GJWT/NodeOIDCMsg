// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#! /usr/bin/env node

"use strict";

var U2 = require("../tools/node");
var fs = require("fs");
var yargs = require("yargs");
var ARGS = yargs
    .describe("o", "Output file")
    .argv;
var files = ARGS._.slice();
var output = {
    vars: {},
    props: {}
};

if (ARGS.o) try {
    output = JSON.parse(fs.readFileSync(ARGS.o, "utf8"));
} catch(ex) {}

files.forEach(getProps);

if (ARGS.o) {
    fs.writeFileSync(ARGS.o, JSON.stringify(output, null, 2), "utf8");
} else {
    console.log("%s", JSON.stringify(output, null, 2));
}

function getProps(filename) {
    var code = fs.readFileSync(filename, "utf8");
    var ast = U2.parse(code);

    ast.walk(new U2.TreeWalker(function(node){
        if (node instanceof U2.AST_ObjectKeyVal) {
            add(node.key);
        }
        else if (node instanceof U2.AST_ObjectProperty) {
            add(node.key.name);
        }
        else if (node instanceof U2.AST_Dot) {
            add(node.property);
        }
        else if (node instanceof U2.AST_Sub) {
            addStrings(node.property);
        }
    }));

    function addStrings(node) {
        var out = {};
        try {
            (function walk(node){
                node.walk(new U2.TreeWalker(function(node){
                    if (node instanceof U2.AST_Seq) {
                        walk(node.cdr);
                        return true;
                    }
                    if (node instanceof U2.AST_String) {
                        add(node.value);
                        return true;
                    }
                    if (node instanceof U2.AST_Conditional) {
                        walk(node.consequent);
                        walk(node.alternative);
                        return true;
                    }
                    throw out;
                }));
            })(node);
        } catch(ex) {
            if (ex !== out) throw ex;
        }
    }

    function add(name) {
        output.props[name] = true;
    }
}
