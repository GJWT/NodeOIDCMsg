// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#!/usr/bin/env node
'use strict';
var conventionalChangelogWriter = require('./');
var forEach = require('lodash').forEach;
var fs = require('fs');
var meow = require('meow');
var path = require('path');
var split = require('split');

var cli = meow({
  help: [
    'Usage',
    '  conventional-changelog-writer <path> [<path> ...]',
    '  cat <path> | conventional-changelog-writer',
    '',
    'Example',
    '  conventional-changelog-writer commits.ldjson',
    '  cat commits.ldjson | conventional-changelog-writer',
    '',
    'Options',
    '  -c, --context    A filepath of a json that is used to define template variables',
    '  -o, --options    A filepath of a javascript object that is used to define options'
  ]
}, {
  alias: {
    c: 'context',
    o: 'options'
  }
});

var filePaths = [];
var flags = cli.flags;

forEach(cli.input, function(input) {
  filePaths.push(input);
});

var length = filePaths.length;

var templateContext;
var contextPath = flags.context;
if (contextPath) {
  try {
    templateContext = require(path.resolve(process.cwd(), contextPath));
  } catch (err) {
    console.error('Failed to get context from file ' + contextPath + '\n' + err);
    process.exit(1);
  }
}

var options;
var optionsPath = flags.options;
if (optionsPath) {
  try {
    options = require(path.resolve(process.cwd(), optionsPath));
  } catch (err) {
    console.error('Failed to get options from file ' + optionsPath + '\n' + err);
    process.exit(1);
  }
}

try {
  var stream = conventionalChangelogWriter(templateContext, options);
} catch (err) {
  console.error(err.toString());
  process.exit(1);
}

function processFile(fileIndex) {
  var filePath = filePaths[fileIndex];
  fs.createReadStream(filePath)
    .on('error', function(err) {
      console.warn('Failed to read file ' + filePath + '\n' + err);
      if (++fileIndex < length) {
        processFile(fileIndex);
      }
    })
    .pipe(split(JSON.parse))
    .on('error', function(err) {
      console.warn('Failed to split commits in file ' + filePath + '\n' + err);
    })
    .pipe(stream)
    .on('error', function(err) {
      console.warn('Failed to process file ' + filePath + '\n' + err);
      if (++fileIndex < length) {
        processFile(fileIndex);
      }
    })
    .on('end', function() {
      if (++fileIndex < length) {
        processFile(fileIndex);
      }
    })
    .pipe(process.stdout);
}

if (!process.stdin.isTTY) {
  process.stdin
    .pipe(split(JSON.parse))
    .on('error', function(err) {
      console.error('Failed to split commits\n' + err);
      process.exit(1);
    })
    .pipe(stream)
    .on('error', function(err) {
      console.error('Failed to process file\n' + err);
      process.exit(1);
    })
    .pipe(process.stdout);
} else if (length === 0) {
  console.error('You must specify at least one line delimited json file');
  process.exit(1);
} else {
  processFile(0);
}
