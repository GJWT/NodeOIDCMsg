// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';
var dargs = require('dargs');
var execFile = require('child_process').execFile;
var split = require('split2');
var stream = require('stream');
var template = require('lodash.template');
var through = require('through2');

var DELIMITER = '------------------------ >8 ------------------------';

function normalizeExecOpts(execOpts) {
  execOpts = execOpts || {};
  execOpts.cwd = execOpts.cwd || process.cwd();
  return execOpts;
}

function normalizeGitOpts(gitOpts) {
  gitOpts = gitOpts || {};
  gitOpts.format = gitOpts.format || '%B';
  gitOpts.from = gitOpts.from || '';
  gitOpts.to = gitOpts.to || 'HEAD';
  return gitOpts;
}

function getGitArgs(gitOpts) {
  var gitFormat = template('--format=<%= format %>%n' + DELIMITER)(gitOpts);
  var gitFromTo = [gitOpts.from, gitOpts.to].filter(Boolean).join('..');

  var gitArgs = ['log', gitFormat, gitFromTo];

  // allow commits to focus on a single directory
  // this is useful for monorepos.
  if (gitOpts.path) {
    gitArgs.push('--', gitOpts.path);
  }

  return gitArgs.concat(dargs(gitOpts, {
    excludes: ['debug', 'from', 'to', 'format', 'path']
  }));
}

function gitRawCommits(rawGitOpts, rawExecOpts) {
  var readable = new stream.Readable();
  readable._read = function() {};

  var gitOpts = normalizeGitOpts(rawGitOpts);
  var execOpts = normalizeExecOpts(rawExecOpts);
  var args = getGitArgs(gitOpts);

  if (gitOpts.debug) {
    gitOpts.debug('Your git-log command is:\ngit ' + args.join(' '));
  }

  var isError = false;

  var child = execFile('git', args, {
    cwd: execOpts.cwd,
    maxBuffer: Infinity
  });

  child.stdout
    .pipe(split(DELIMITER + '\n'))
    .pipe(through(function(chunk, enc, cb) {
      readable.push(chunk);
      isError = false;

      cb();
    }, function(cb) {
      setImmediate(function() {
        if (!isError) {
          readable.push(null);
          readable.emit('close');
        }

        cb();
      });
    }));

  child.stderr
    .pipe(through.obj(function(chunk) {
      isError = true;
      readable.emit('error', new Error(chunk));
      readable.emit('close');
    }));

  return readable;
}

module.exports = gitRawCommits;
