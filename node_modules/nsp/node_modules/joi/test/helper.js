// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Load modules

var Code = require('code');
var Joi = require('../');


// Declare internals

var internals = {};


// Test shortcuts

var expect = Code.expect;


exports.validate = function (schema, config, callback) {

    return exports.validateOptions(schema, config, null, callback);
};


exports.validateOptions = function (schema, config, options, callback) {

    var compiled = Joi.compile(schema);
    for (var i = 0, il = config.length; i < il; ++i) {

        var item = config[i];
        var result = Joi.validate(item[0], compiled, item[2] || options);

        var err = result.error;
        var value = result.value;

        if (err !== null && item[1]) {
            console.log(err);
        }

        if (err === null && !item[1]) {
            console.log(item[0]);
        }

        expect(err === null).to.equal(item[1]);

        if (item.length >= 4) {
            var comparator = item[3];
            if (item[1]) {
                expect(value).to.deep.equal(comparator);
            }
            else {
                if (comparator instanceof RegExp) {
                    expect(err.message).to.match(comparator);
                }
                else {
                    expect(err.message).to.deep.equal(comparator);
                }
            }
        }
    }

    if (callback) {
        callback();
    }
};
