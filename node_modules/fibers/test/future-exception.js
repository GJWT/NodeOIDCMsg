// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var Fiber = require('fibers');
var Future = require('future');

// Possible outputs:
// pass: exception is thrown and caught in uncaughtException
// fail: exception is thrown and not caught
// no output: process dies


var thrown = false;
var caught = false;

var async = function(continuation) {
	process.nextTick(function() {
		continuation();
	});
}

process.on('uncaughtException', function(err) {
	if (err.message === 'Catch me if you can') {
		caught = true;
	} else {
		throw err;
	}
});

// This fiber's job is to throw an exception after yielding.
Fiber(function() {
	// yield and resume via Future.wait() and its cb() helper
	var sync = Future.wrap(async)();
	sync.wait();

	// this should get rethrown to the main event loop
	thrown = true;
	throw new Error('Catch me if you can');
}).run();

// This fiber's job is to make sure the process is still alive after the
// exception was thrown.
Fiber(function() {
	// wait for other fiber to throw exception and yield
	while (!thrown) {
		var sync = Future.wrap(async)();
		sync.wait();
	}

	// wait once more to allow exception to get caught
	process.nextTick(function() {
		// see if we have noticed the exception we expect to
		console.log(caught ? 'pass' : 'fail');
	});
}).run();
