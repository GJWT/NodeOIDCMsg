// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var Fiber = require('fibers');

// Calculate how far we can go recurse without hitting the JS stack limit
function calculateStackSpace() {
	var max = 0;
	function testRecursion(ii) {
		++max;
		testRecursion(ii + 1);
	}
	try {
		testRecursion();
	} catch (err) {}
	return max;
}

// Invoke a RepExp operation that eats a lot of stack space
function pathologicRegExp(preStack) {
	function fn() {
		var foo = '';
		for (var ii = 0; ii < 1024; ++ii) {
			foo += 'a';
		}
		new RegExp(foo, 'g');
	}

	// Recurse to the limit and then invoke a stack-heavy C++ operation
	function wasteStack(ii) {
		ii ? wasteStack(ii - 1) : fn();
	}
	wasteStack(preStack);
}

Fiber(function() {

	// Ensure that this doesn't ruin everything while in a fiber
	var max = calculateStackSpace();
	for (var stack = max; stack > 0; --stack) {
		try {
			pathologicRegExp(stack);
			break;
		} catch (err) {}
	}
}).run();

console.log('pass');
