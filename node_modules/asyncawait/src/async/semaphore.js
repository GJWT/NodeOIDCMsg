// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/** A simple abstraction for limiting concurrent function calls to a specific upper bound. */
var Semaphore = (function () {
    function Semaphore(n) {
        this.n = n;
        this._queued = [];
        this._avail = n;
    }
    Semaphore.prototype.enter = function (fn) {
        if (this._avail > 0) {
            --this._avail;
            fn();
        }
        else {
            this._queued.push(fn);
        }
    };
    Semaphore.prototype.leave = function () {
        if (this._queued.length > 0) {
            var fn = this._queued.pop();
            fn();
        }
        else {
            ++this._avail;
        }
    };
    Semaphore.unlimited = new Semaphore(10000000);
    return Semaphore;
})();
module.exports = Semaphore;
//# sourceMappingURL=semaphore.js.map