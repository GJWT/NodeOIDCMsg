// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var restParam = require('../function/restParam'),
    unzipWith = require('./unzipWith');

/**
 * This method is like `_.zip` except that it accepts an iteratee to specify
 * how grouped values should be combined. The `iteratee` is bound to `thisArg`
 * and invoked with four arguments: (accumulator, value, index, group).
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {...Array} [arrays] The arrays to process.
 * @param {Function} [iteratee] The function to combine grouped values.
 * @param {*} [thisArg] The `this` binding of `iteratee`.
 * @returns {Array} Returns the new array of grouped elements.
 * @example
 *
 * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
 * // => [111, 222]
 */
var zipWith = restParam(function(arrays) {
  var length = arrays.length,
      iteratee = length > 2 ? arrays[length - 2] : undefined,
      thisArg = length > 1 ? arrays[length - 1] : undefined;

  if (length > 2 && typeof iteratee == 'function') {
    length -= 2;
  } else {
    iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
    thisArg = undefined;
  }
  arrays.length = length;
  return unzipWith(arrays, iteratee, thisArg);
});

module.exports = zipWith;
