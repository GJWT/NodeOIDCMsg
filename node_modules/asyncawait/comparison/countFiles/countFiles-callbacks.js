// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var fs = require('fs');
var path = require('path');
var _ = require('lodash');


/** Returns the number of files in the given directory. */
var countFiles = function (dir, callback) {

    // Get all directory entries.
    fs.readdir(dir, function (err, files) {
        if (err) { callback(err); return; }
        var paths = _.map(files, function (file) { return path.join(dir, file); });
        (function getStatsInParallel(callback) {
            var stats = [];
            var remaining = paths.length;
            if (remaining === 0) {

                // Directory is empty.
                callback(null, stats);
                return;
            } else {

                // Get all file stats in parallel.
                paths.forEach(function (path, i) {
                    fs.stat(path, function (err, stat) {
                        if (remaining === 0) return;
                        if (err) {
                            remaining = 0;
                            callback(err);
                        } else {
                            stats[i] = stat;
                            --remaining;
                            if (remaining === 0) callback(null, stats);
                        }
                    });
                });
            }
        })(function (err, stats) {

            // Count the files.
            if (err) { callback(err); return; }
            var result = _.filter(stats, function (stat) { return stat.isFile(); }).length;
            callback(null, result);
        });
    });
}


module.exports = countFiles;
