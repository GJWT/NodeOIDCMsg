// Copyright (c) 2017 The Authors of 'JWTS for NODE'
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

ï»¿var Promise = require('bluebird');
var async = require('..').async;
var await = require('..').await;


// A slow asynchronous function, written in async/await style.
var longCalculation = async (function (seconds, result) {
    await(Promise.delay(seconds * 1000));
    return result;
});

// A pair of synchronous-looking compound operations, written in async/await style.
var compoundOperationA = async (function () {
    console.log('A: zero');
    console.log(await(longCalculation(1, 'A: one')));
    console.log(await(longCalculation(1, 'A: two')));
    console.log(await(longCalculation(1, 'A: three')));
    return 'A: Finished!';
});
var compoundOperationB = async (function () {
    await(longCalculation(0.5, '')); // Fall half a second behind A.
    console.log('B: zero');
    console.log(await(longCalculation(1, 'B: one')));
    console.log(await(longCalculation(1, 'B: two')));
    console.log(await(longCalculation(1, 'B: three')));
    return 'B: Finished!';
});

// Start both compound operations.
compoundOperationA().then(function (result) { console.log(result); });
compoundOperationB().then(function (result) { console.log(result); });

// Outputs (with half second delays between lines):
// A: zero
// B: zero
// A: one
// B: one
// A: two
// B: two
// A: three
// A: Finished!
// B: three
// B: Finished!
